<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git多账号配置</title>
    <url>/2019/11/15/Git%E5%A4%9A%E8%B4%A6%E5%8F%B7%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="1-生成新的-SSH-keys"><a href="#1-生成新的-SSH-keys" class="headerlink" title="1.生成新的 SSH keys"></a>1.生成新的 SSH keys</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa.github -C "xxxx@163.com"</span><br><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa.gitee -C "xxxx@163.com"</span><br><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa.gitlab -C "xxxx@163.net"</span><br></pre></td></tr></table></figure><a id="more"></a>
<h2 id="2-多账号必须配置-config-文件-重点"><a href="#2-多账号必须配置-config-文件-重点" class="headerlink" title="2.多账号必须配置 config 文件(重点)"></a>2.多账号必须配置 config 文件(重点)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> touch ~/.ssh/config</span></span><br></pre></td></tr></table></figure>
<h2 id="3-config-里需要填的内容"><a href="#3-config-里需要填的内容" class="headerlink" title="3.config 里需要填的内容"></a>3.config 里需要填的内容</h2><pre><code class="shell"><span class="meta">#</span><span class="bash">Default gitHub user Self</span>
Host github.com
HostName github.com
User git
IdentityFile ~/.ssh/id_rsa.github

<span class="meta">#</span><span class="bash"> gitee</span>
    Host gitee.com
    HostName gitee.com
    User git
    IdentityFile ~/.ssh/id_rsa.gitee


<span class="meta">#</span><span class="bash">Add gitLab user </span>
    Host git@DiEP-Infra
    HostName DiEP-Infra
    IdentityFile ~/.ssh/id_rsa.gitlab</code></pre>
<h2 id="4-在-github-和-gitlab-网站添加-ssh"><a href="#4-在-github-和-gitlab-网站添加-ssh" class="headerlink" title="4.在 github 和 gitlab 网站添加 ssh"></a>4.在 github 和 gitlab 网站添加 ssh</h2><p>拷贝的~/.ssh/id_rsa.xxx.pub文件内容粘帖到 key 一栏，在点击 “add key” 按钮就可以了。</p>
<p><a href="https://gitee.com/profile/sshkeys" target="_blank" rel="noopener">https://gitee.com/profile/sshkeys</a><br><a href="https://github.com/settings/keys" target="_blank" rel="noopener">https://github.com/settings/keys</a></p>
<h2 id="5-测试是否连接成功"><a href="#5-测试是否连接成功" class="headerlink" title="5.测试是否连接成功"></a>5.测试是否连接成功</h2><pre><code class="shell">ssh -T git@github.com
ssh -T  git@gitLab-host
ssh -T git@gitee.com</code></pre>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
        <tag>Gitee</tag>
        <tag>Gitlab`</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Vultr CentOS7主机禁用80端口问题</title>
    <url>/2019/11/15/%E8%A7%A3%E5%86%B3Vultr%20CentOS7%E4%B8%BB%E6%9C%BA%E7%A6%81%E7%94%A880%E7%AB%AF%E5%8F%A3%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在VULTR centOS7上安装了Nginx，无法访问Nginx初始化页面。</p><p>查询资料后发现应该是防火墙禁了80端口，解禁后页面访问正常,以下为操作步骤</p><h2 id="1-查看防火墙版本号"><a href="#1-查看防火墙版本号" class="headerlink" title="1.查看防火墙版本号"></a>1.查看防火墙版本号</h2><p>firewall-cmd –version<br>centos 7.3是自带firewall防火墙，提示版本号。</p><h2 id="2-查看防火墙状态"><a href="#2-查看防火墙状态" class="headerlink" title="2.查看防火墙状态"></a>2.查看防火墙状态</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure><a id="more"></a>



<h2 id="3-添加80端口的权限"><a href="#3-添加80端口的权限" class="headerlink" title="3.添加80端口的权限"></a>3.添加80端口的权限</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure>

<p>命令含义：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--zone #作用域</span><br><span class="line">--add-port=80/tcp #添加端口，格式为：端口/通讯协议</span><br><span class="line">--permanent #永久生效，没有此参数重启后失效</span><br></pre></td></tr></table></figure>
<h2 id="4-重启防火墙"><a href="#4-重启防火墙" class="headerlink" title="4.重启防火墙"></a>4.重启防火墙</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure>

<p>扩展：</p>
<p>firewalld的命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">运行、停止、禁用firewalld</span><br><span class="line">启动：# systemctl start firewalld</span><br><span class="line">重启：# systemctl restart firewalld</span><br><span class="line">查看状态：# systemctl status firewalld 或者 firewall-cmd --state</span><br><span class="line">停止：# systemctl disable firewalld</span><br><span class="line">禁用：# systemctl stop firewalld</span><br><span class="line">配置firewalld</span><br><span class="line">查看版本：$ firewall-cmd --version</span><br><span class="line">查看帮助：$ firewall-cmd --help</span><br><span class="line">显示状态：$ firewall-cmd --state</span><br><span class="line">查看区域信息: $ firewall-cmd --get-active-zones</span><br><span class="line">查看指定接口所属区域：$ firewall-cmd --get-zone-of-interface=eth0</span><br><span class="line">拒绝所有包：# firewall-cmd --panic-on</span><br><span class="line">取消拒绝状态：# firewall-cmd --panic-off</span><br><span class="line">查看是否拒绝：$ firewall-cmd --query-panic</span><br><span class="line">更新防火墙规则：</span><br><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --reload</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --complete-reload</span></span><br><span class="line">两者的区别就是第一个无需断开连接，就是firewalld特性之一动态添加规则，第二个需要断开连接，类似重启服务</span><br><span class="line">将接口添加到区域，默认接口都在public</span><br><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --zone=public --add-interface=eth0</span></span><br><span class="line">永久生效再加上 --permanent 然后reload防火墙</span><br><span class="line">设置默认接口区域</span><br><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --<span class="built_in">set</span>-default-zone=public</span></span><br><span class="line">立即生效无需重启</span><br><span class="line">打开端口（貌似这个才最常用）</span><br><span class="line">查看所有打开的端口：</span><br><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --zone=dmz --list-ports</span></span><br><span class="line">加入一个端口到区域：</span><br><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --zone=dmz --add-port=8080/tcp</span></span><br><span class="line">若要永久生效方法同上</span><br><span class="line">打开一个服务，类似于将端口可视化，服务需要在配置文件中添加，/etc/firewalld 目录下有services文件夹，这个不详细说了，详情参考文档</span><br><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --zone=work --add-service=smtp</span></span><br><span class="line">移除服务</span><br><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --zone=work --remove-service=smtp</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Vultr</tag>
      </tags>
  </entry>
  <entry>
    <title>Supervisor使用</title>
    <url>/2019/11/12/Supervisor%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Surpervisor介绍"><a href="#Surpervisor介绍" class="headerlink" title="Surpervisor介绍"></a>Surpervisor介绍</h2><ul>
<li>官方链接 <a href="http://supervisord.org/" target="_blank" rel="noopener" title="Supervisor: A Process Control System">Supervisor</a>.</li>
<li>官方介绍 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Supervisor is a client/server system that allows its users to monitor and control a number of processes on UNIX-like operating systems.</span><br></pre></td></tr></table></figure>
<h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2></li>
<li>Python版本<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.5</span><br></pre></td></tr></table></figure></li>
<li>操作系统<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Distributor ID:	CentOS</span><br><span class="line">Description:	CentOS Linux release 7.6.1810 (Core) </span><br><span class="line">Release:	7.6.1810</span><br><span class="line">Codename:	Core</span><br></pre></td></tr></table></figure>
<h2 id="Surpervisor安装"><a href="#Surpervisor安装" class="headerlink" title="Surpervisor安装"></a>Surpervisor安装</h2><h3 id="1-Pip在线安装"><a href="#1-Pip在线安装" class="headerlink" title="1.Pip在线安装"></a>1.Pip在线安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install supervisor</span><br></pre></td></tr></table></figure>

</li>
</ul><a id="more"></a>
<h3 id="2-发布包安装-centos为例"><a href="#2-发布包安装-centos为例" class="headerlink" title="2.发布包安装(centos为例)"></a>2.发布包安装(centos为例)</h3><ul>
<li><p>yum install 的方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y supervisor</span><br></pre></td></tr></table></figure>
</li>
<li><p>easy_install的方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y python-setuptools</span><br><span class="line">easy_install supervisor</span><br><span class="line">echo_supervisord_conf &gt; /etc/supervisord.conf</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Surpervisor配置"><a href="#Surpervisor配置" class="headerlink" title="Surpervisor配置"></a>Surpervisor配置</h2><h3 id="默认supervisord配置"><a href="#默认supervisord配置" class="headerlink" title="默认supervisord配置"></a>默认supervisord配置</h3><p>1.查看默认配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo_supervisord_conf</span><br></pre></td></tr></table></figure>
<p>2.yum install方式安装 以下文件和目录会自动生成,如果没有,请自行创建</p>
<blockquote>
<p>/etc/supervisord.conf<br>/etc/supervisord.d</p>
</blockquote>
<p>3.在 /etc/supervisord.d下创建conf和log两个目录,用于存储管理进程配置文件和日志文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/supervisord.d</span><br><span class="line">mkdir conf log</span><br></pre></td></tr></table></figure>
<p>4.修改/etc/supervisord.conf的[include]</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/supervisord.conf</span><br></pre></td></tr></table></figure>

<p>5.将/etc/supervisord.d/conf目录所用应用配置包含进来</p>
<blockquote>
<p>[include]<br>files = supervisord.d/conf/*.conf</p>
</blockquote>
<h3 id="应用配置"><a href="#应用配置" class="headerlink" title="应用配置"></a>应用配置</h3><p><code>需要说明的是 在启动Nginx命令需要增加daemon off参数</code></p>
<p>创建nginx.conf配置文件,内容如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[program:nginx]</span><br><span class="line">directory = /usr/local/nginx/sbin ; 程序的启动目录</span><br><span class="line">command = /usr/local/nginx/sbin/nginx -g 'daemon off;' </span><br><span class="line">autostart = true     ; 在 supervisord 启动的时候也自动启动</span><br><span class="line">startsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了</span><br><span class="line">autorestart = true   ; 程序异常退出后自动重启</span><br><span class="line">startretries = 3     ; 启动失败自动重试次数，默认是 3</span><br><span class="line">user = root          ; 用哪个用户启动</span><br><span class="line">redirect_stderr = true  ; 把 stderr 重定向到 stdout，默认 false</span><br><span class="line">stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB</span><br><span class="line">stdout_logfile_backups = 20     ; stdout 日志文件备份数</span><br><span class="line">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class="line">stdout_logfile = /etc/supervisord.d/log/nginx.log  ;日志统一放在log目录下</span><br><span class="line">; 可以通过 environment 来添加需要的环境变量，一种常见的用法是修改 PYTHONPATH</span><br><span class="line">; environment=PYTHONPATH=$PYTHONPATH:/path/to/somewhere</span><br></pre></td></tr></table></figure>

<h2 id="Surpervisor启动"><a href="#Surpervisor启动" class="headerlink" title="Surpervisor启动"></a>Surpervisor启动</h2><ul>
<li><p>方式一</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> supervisord二进制启动</span></span><br><span class="line">supervisord -c /etc/supervisord.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查进程</span></span><br><span class="line">ps aux | grep supervisord</span><br></pre></td></tr></table></figure>
</li>
<li><p>方式二</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /etc/rc.d/init.d/supervisord</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Supervisor is a client/server system that</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> allows its users to monitor and control a</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> number of processes on UNIX-like operating</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systems.</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chkconfig: - 64 36</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> description: Supervisor Server</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> processname: supervisord</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Source init <span class="built_in">functions</span></span></span><br><span class="line">. /etc/rc.d/init.d/functions</span><br><span class="line"></span><br><span class="line">prog="supervisord"</span><br><span class="line"></span><br><span class="line">prefix="/usr"</span><br><span class="line">exec_prefix="$&#123;prefix&#125;"</span><br><span class="line">prog_bin="$&#123;exec_prefix&#125;/bin/supervisord"</span><br><span class="line">PIDFILE="/var/run/$prog.pid"</span><br><span class="line"></span><br><span class="line">start()</span><br><span class="line">&#123;</span><br><span class="line">       echo -n $"Starting $prog: "</span><br><span class="line">       daemon $prog_bin --pidfile $PIDFILE -c /etc/supervisord.conf</span><br><span class="line">       [ -f $PIDFILE ] &amp;&amp; success $"$prog startup" || failure $"$prog startup"</span><br><span class="line">       echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop()</span><br><span class="line">&#123;</span><br><span class="line">       echo -n $"Shutting down $prog: "</span><br><span class="line">       [ -f $PIDFILE ] &amp;&amp; killproc $prog || success $"$prog shutdown"</span><br><span class="line">       echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case "$1" in</span><br><span class="line"></span><br><span class="line"> start)</span><br><span class="line">   start</span><br><span class="line"> ;;</span><br><span class="line"></span><br><span class="line"> stop)</span><br><span class="line">   stop</span><br><span class="line"> ;;</span><br><span class="line"></span><br><span class="line"> status)</span><br><span class="line">       status $prog</span><br><span class="line"> ;;</span><br><span class="line"></span><br><span class="line"> restart)</span><br><span class="line">   stop</span><br><span class="line">   start</span><br><span class="line"> ;;</span><br><span class="line"></span><br><span class="line"> *)</span><br><span class="line">   echo "Usage: $0 &#123;start|stop|restart|status&#125;"</span><br><span class="line"> ;;</span><br><span class="line"></span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="supervisorctl-amp-supervisord"><a href="#supervisorctl-amp-supervisord" class="headerlink" title="supervisorctl&amp;supervisord"></a>supervisorctl&amp;supervisord</h2><h3 id="supervisorctl"><a href="#supervisorctl" class="headerlink" title="supervisorctl"></a>supervisorctl</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">supervisorctl stop programxxx，停止某一个进程(programxxx)，programxxx 为[program:beepkg] 里配置的值，这个示例就是 beepkg。  </span><br><span class="line">supervisorctl start programxxx，启动某个进程。  </span><br><span class="line">supervisorctl restart programxxx，重启某个进程。  </span><br><span class="line">supervisorctl status，查看进程状态。  </span><br><span class="line">supervisorctl stop groupworker ，重启所有属于名为 groupworker 这个分组的进程(start,restart 同理)。  </span><br><span class="line">supervisorctl stop all，停止全部进程，注：start、restart、stop 都不会载入最新的配置文件。  </span><br><span class="line">supervisorctl reload，载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程。  </span><br><span class="line">supervisorctl update，根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启。</span><br></pre></td></tr></table></figure>
<h3 id="supervisord"><a href="#supervisord" class="headerlink" title="supervisord"></a>supervisord</h3><p>supervisord，初始启动 Supervisord，启动、管理配置中设置的进程</p>
<h2 id="Supervisor控制台"><a href="#Supervisor控制台" class="headerlink" title="Supervisor控制台"></a>Supervisor控制台</h2><p>在/etc/supervisord.conf中修改[inet_http_server]的参数，具体如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[inet_http_server]         ; inet (TCP) server disabled by default</span><br><span class="line">port=*:9001        ; ip_address:port specifier, *:port for all iface</span><br><span class="line">username=root             ; default is no username (open server)</span><br><span class="line">password=xxxx               ; default is no password (open server)</span><br></pre></td></tr></table></figure>

<p>修改后重启supervisor进程，在浏览器访问 http://<host-ip>:9001</host-ip></p>
<p>参考：<br><a href="http://supervisord.org/" target="_blank" rel="noopener">http://supervisord.org/</a><br><a href="https://blog.csdn.net/huwh_/article/details/80497790" target="_blank" rel="noopener">https://blog.csdn.net/huwh_/article/details/80497790</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Supervisor</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统安装Nodejs</title>
    <url>/2019/10/31/Linux%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85Nodejs/</url>
    <content><![CDATA[<h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p>1.下载地址 : <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p>
<p><img src="http://ningyylin.top/image/nodejs/nodejs_1_1.png" alt=""></p>
<p>2.选择合适环境的linux版本下载</p>
<a id="more"></a>

<p><img src="http://ningyylin.top/image/nodejs/nodejs_1_2.png" alt=""></p>
<h2 id="安装NODEJS"><a href="#安装NODEJS" class="headerlink" title="安装NODEJS"></a>安装NODEJS</h2><p>1.将安装包上传到指定位置(/usr/local/src/)目录，并解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvf node-v12.13.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>
<p>2.重命名文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv node-v12.13.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>
<p>3.通过建立软连接变为全局</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /usr/local/src/nodejs/bin/npm /usr/local/bin/</span><br><span class="line">ln -s /usr/local/src/nodejs/bin/node /usr/local/bin/</span><br></pre></td></tr></table></figure>
<p>4.检查是否安装成功，命令：node -v,npm -v</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line"></span><br><span class="line">v12.13.0</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm -v</span><br><span class="line"></span><br><span class="line">6.12.0</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
</search>
