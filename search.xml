<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hive 建表指定分号作为分隔符</title>
    <url>/2020/1/Hive%20%E5%BB%BA%E8%A1%A8%E6%8C%87%E5%AE%9A%E5%88%86%E5%8F%B7%E4%BD%9C%E4%B8%BA%E5%88%86%E9%9A%94%E7%AC%A6/</url>
    <content><![CDATA[<p>本文在创建hive表中定义字段分割符的时候 用了”;”作为字段分隔符，起因是数据中存在逗号，默认采用的逗号作为分割符会产生数据分裂</p><h1 id="原始数据样本"><a href="#原始数据样本" class="headerlink" title="原始数据样本"></a>原始数据样本</h1><p>demo.csv</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">111;Wuxi Demi Trading Co.,Ltd.;12</span><br><span class="line">222;Jiangsu Jiyin Food Co.,Ltd.;12</span><br><span class="line">333;Jiangsu Maileduo Technology Co.,Ltd;22</span><br></pre></td></tr></table></figure><a id="more"></a>



<h1 id="创建hive表语句"><a href="#创建hive表语句" class="headerlink" title="创建hive表语句"></a>创建hive表语句</h1><p>分号的ASCII值是073 那么将定义表如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> <span class="keyword">sample</span> (</span><br><span class="line">    vendor_nbr <span class="keyword">string</span>,</span><br><span class="line">    vendor_name <span class="keyword">string</span>,</span><br><span class="line">    vnpk_qty <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> </span><br><span class="line"><span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\073'</span> </span><br><span class="line"><span class="keyword">stored</span> <span class="keyword">as</span> textfile location <span class="string">'/example/lin/csv/'</span>;</span><br></pre></td></tr></table></figure>
<h1 id="查询效果如图"><a href="#查询效果如图" class="headerlink" title="查询效果如图"></a>查询效果如图</h1><p><img src="http://ningyylin.top/image/bigdata/hive-create-table.png" alt></p>
<h1 id="备选方案"><a href="#备选方案" class="headerlink" title="备选方案"></a>备选方案</h1><p>如果一定要用逗号(,)作为分隔符,请使用以下语句定义hive表</p>
<h2 id="有转义符"><a href="#有转义符" class="headerlink" title="有转义符"></a>有转义符</h2><p>数据的逗号前面要有转义符(\)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> <span class="keyword">sample</span> (</span><br><span class="line">    vendor_nbr <span class="keyword">string</span>,</span><br><span class="line">    vendor_name <span class="keyword">string</span>,</span><br><span class="line">    vnpk_qty <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span></span><br><span class="line"><span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="keyword">escaped</span> <span class="keyword">by</span> <span class="string">'\\'</span></span><br><span class="line"><span class="keyword">stored</span> <span class="keyword">as</span> textfile location <span class="string">'/example/lin/csv/'</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">111;Wuxi Demi Trading Co.\,Ltd.;12</span><br><span class="line">222;Jiangsu Jiyin Food Co.\,Ltd.;12</span><br><span class="line">333;Jiangsu Maileduo Technology Co.\,Ltd;22</span><br></pre></td></tr></table></figure>


<h2 id="无转义符"><a href="#无转义符" class="headerlink" title="无转义符"></a>无转义符</h2><p>数据的逗号前面没有转义符(\)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> <span class="keyword">sample</span>(</span><br><span class="line">    vendor_nbr <span class="keyword">string</span>,</span><br><span class="line">    vendor_name <span class="keyword">string</span>,</span><br><span class="line">    vnpk_qty <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> SERDE <span class="string">'org.apache.hadoop.hive.contrib.serde2.RegexSerDe'</span> </span><br><span class="line"><span class="keyword">WITH</span> SERDEPROPERTIES (<span class="string">"input.regex"</span> = <span class="string">"(.*?),(.*),(.*)"</span>)</span><br><span class="line"><span class="keyword">stored</span> <span class="keyword">as</span> textfile location <span class="string">'/example/lin/csv/'</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">111;Wuxi Demi Trading Co.,Ltd.;12</span><br><span class="line">222;Jiangsu Jiyin Food Co.,Ltd.;12</span><br><span class="line">333;Jiangsu Maileduo Technology Co.,Ltd;22</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Bigdata</category>
      </categories>
      <tags>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>sed命令笔记</title>
    <url>/2020/1/sed%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">'s/char/chara/g'</span> filename  <span class="comment">#这里是将filename的文件中所有的char替换为chara</span></span><br><span class="line">sed <span class="string">'/^$/d'</span> file  <span class="comment">#删除空白行</span></span><br><span class="line">sed <span class="string">'2d'</span> file  <span class="comment">#删除第二行</span></span><br><span class="line">sed <span class="string">'2,$d'</span> file  <span class="comment">#删除第二行到最后一行</span></span><br><span class="line">sed <span class="string">'$d'</span> file <span class="comment">#删除最后一行</span></span><br><span class="line">sed <span class="string">'/^test/'</span>d file <span class="comment">#删除开头为test的行</span></span><br><span class="line">sed -i <span class="string">'2a\this is a test line'</span> test.conf <span class="comment">#将this is a test line添加至第二行</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Sed</tag>
      </tags>
  </entry>
  <entry>
    <title>你是普通人吗</title>
    <url>/2020/1/%E4%BD%A0%E6%98%AF%E6%99%AE%E9%80%9A%E4%BA%BA%E5%90%97%20/</url>
    <content><![CDATA[<p>  &nbsp;&nbsp;&nbsp;&nbsp;最近听到一段对话，谈到人的智商真的是有差别的。听完之后，就想到另外一句话，就是我们很多人拼尽一生，也不过，让自己成为了一个普通人。你的生活阅历，你的经验，总结出来的一些话，一些人生哲理，但对于别人而言，它只是常识。<br>  &nbsp;&nbsp;&nbsp;&nbsp;中国的经济发展，速度比较快，不为生存而烦恼才能谈得上发展。这个过程有没有跨越式的，当然有。但毕竟是少部分人。绝大部分人，必须要经历为生存烦恼，到为发展而烦恼这个过程。<br>  &nbsp;&nbsp;&nbsp;&nbsp;通过二八定律，我们会发现一个问题，80%的人为生存而烦恼，没有资格为发展而烦恼。所以大部分年轻人，当然也包括我这种即将步入中年的人都是一样的，必须生命不息，奋斗不止。<br>  &nbsp;&nbsp;&nbsp;&nbsp;读了快20年的书，深感中国教育都是要学生守规矩，安分守己。守规矩的人基本上也都是平庸人和平常人，因为富贵险中求。这些年轻人，拼命的努力，最后获得的就是一个普通人。什么叫普通人，正常的普通人就是不为生存而烦恼。</p>]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>人生</tag>
      </tags>
  </entry>
  <entry>
    <title>从RDBMS增量拉取数据思路</title>
    <url>/2020/1/%E5%A2%9E%E9%87%8F%E4%BB%8E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8B%89%E5%8F%96%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p> 这里依据ID和LastModifytime思路是相同的</p><h2 id="在-SQL-数据库中创建数据源表"><a href="#在-SQL-数据库中创建数据源表" class="headerlink" title="在 SQL 数据库中创建数据源表"></a>在 SQL 数据库中创建数据源表</h2><p>1.首先创建示例表data_source_table<br> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> data_source_table</span><br><span class="line">(</span><br><span class="line">    PersonID <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    LastModifytime datetime</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> data_source_table</span><br><span class="line">(PersonID, <span class="keyword">Name</span>, LastModifytime)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'aaaa'</span>,<span class="string">'9/1/2017 12:56:00 AM'</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'bbbb'</span>,<span class="string">'9/2/2017 5:23:00 AM'</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">'cccc'</span>,<span class="string">'9/3/2017 2:36:00 AM'</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">'dddd'</span>,<span class="string">'9/4/2017 3:21:00 AM'</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">'eeee'</span>,<span class="string">'9/5/2017 8:06:00 AM'</span>);</span><br></pre></td></tr></table></figure></p><a id="more"></a>

<p>这里使用 LastModifytime 作为拉取依据</p>
<h2 id="在-SQL-数据库中创建另一个表-存储表名和LastModifytime"><a href="#在-SQL-数据库中创建另一个表-存储表名和LastModifytime" class="headerlink" title="在 SQL 数据库中创建另一个表,存储表名和LastModifytime"></a>在 SQL 数据库中创建另一个表,存储表名和LastModifytime</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> lastmodify_criteria_table</span><br><span class="line">(</span><br><span class="line"></span><br><span class="line">TableName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">LastModifyTimeValue datetime,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="在-SQL-数据库中创建存储过程"><a href="#在-SQL-数据库中创建存储过程" class="headerlink" title="在 SQL 数据库中创建存储过程"></a>在 SQL 数据库中创建存储过程</h2> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p_lastmodify_criteria @LastModifiedtime datetime, @TableName <span class="built_in">varchar</span>(<span class="number">50</span>)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">UPDATE</span> lastmodify_criteria_table</span><br><span class="line">    <span class="keyword">SET</span> [LastModifyTimeValue] = @LastModifiedtime </span><br><span class="line"><span class="keyword">WHERE</span> [TableName] = @TableName</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<h2 id="ETL后续"><a href="#ETL后续" class="headerlink" title="ETL后续"></a>ETL后续</h2><ul>
<li>ETL过程首先需要从lastmodify_criteria_table获取ETL 表的 LastModifyTimeValue</li>
<li>将获取的值传递给ETL动作</li>
<li>ETL完毕调用存储过程，将最大LastModifyTimeValue和表名传递给存储过程，更新lastmodify_criteria_table</li>
</ul>
]]></content>
      <categories>
        <category>Bigdata</category>
      </categories>
      <tags>
        <tag>ETL</tag>
        <tag>Incremental</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop MapReduce Framework Architecture</title>
    <url>/2020/1/Hadoop%20MapReduce%20Framework%20Architecture%20/</url>
    <content><![CDATA[<h2 id="Hadoop-MapReduce-Framework-Architecture"><a href="#Hadoop-MapReduce-Framework-Architecture" class="headerlink" title="Hadoop MapReduce Framework Architecture"></a>Hadoop MapReduce Framework Architecture</h2><p><img src="http://ningyylin.top/image/bigdata/Hadoop-MapReduce-Framework-Architecture.png" alt></p>]]></content>
      <categories>
        <category>Bigdata</category>
      </categories>
      <tags>
        <tag>Bigdata</tag>
        <tag>MapReduce</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Lambda 体系架构</title>
    <url>/2019/12/Lambda%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>使用 Lambda 体系结构可对大型数据集进行高效的数据处理。 Lambda 体系结构使用批处理、流式处理和服务层，将查询大数据时存在的延迟降到最低。</p><p>什么是 lambda 体系结构？<br>lambda 体系结构是一种通用、可缩放且容错的数据处理体系结构，可以解决批处理和速度延迟方案。<br>源： <a href="http://lambda-architecture.net/" target="_blank" rel="noopener">http://lambda-architecture.net/</a></p><a id="more"></a>

<p><img src="http://ningyylin.top/image/bigdata/la-overview_small.png" alt></p>
<p>所有数据同时推送到批处理层和速度层。</p>
<ol>
<li>批处理层包含主数据集（不可变、仅限追加的原始数据集），并预先计算批处理视图。</li>
<li>服务层包含快速查询的批处理视图。</li>
<li>速度层补偿处理时间（针对服务层），只处理最新的数据。</li>
<li>通过合并批处理视图和实时视图中的结果或者单独 ping 每个结果，可以应答所有查询。</li>
</ol>
]]></content>
      <categories>
        <category>Bigdata</category>
      </categories>
      <tags>
        <tag>Lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop数据倾斜问题定位</title>
    <url>/2019/12/Hadoop%E6%95%B0%E6%8D%AE%E5%80%BE%E6%96%9C%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<p>Hadoop集群Datanode数据倾斜，部分节点hdfs空间使用率达到90%以上，于是新增Datenode节点，并进行balance操作。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh start-balancer.sh -threshold 5</span><br></pre></td></tr></table></figure><p>如果需要提高blance的速度，将默认的balance速度从1MB/s增大到50MB/s</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">set</span> balance to 50M/s</span></span><br><span class="line">hdfs dfsadmin -setBalancerBandwidth 52428800</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Bigdata</category>
      </categories>
      <tags>
        <tag>Bigdata,Hdfs,Balance</tag>
      </tags>
  </entry>
  <entry>
    <title>DW数据仓库分层模型设计</title>
    <url>/2019/12/DW%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="DW模型"><a href="#DW模型" class="headerlink" title="DW模型"></a>DW模型</h2><p><img src="http://ningyylin.top/image/bigdata/DW.png" alt></p>]]></content>
      <categories>
        <category>Bigdata</category>
      </categories>
      <tags>
        <tag>Bigdata</tag>
      </tags>
  </entry>
  <entry>
    <title>Python学习-Day4</title>
    <url>/2019/11/Python%E5%AD%A6%E4%B9%A0-Day4/</url>
    <content><![CDATA[<blockquote>
<p>1.递归<br>2.装饰器<br>3.迭代器与生成器<br>4.软件目录结构规范</p>
</blockquote><h2 id="一、递归"><a href="#一、递归" class="headerlink" title="一、递归"></a>一、递归</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>递归算法特点：<br>(1) 递归就是在过程或函数里调用自身。<br>(2) 在使用递归策略时，必须有一个明确的递归结束条件，称为递归出口。<br>(3) 递归算法解题通常显得很简洁，但递归算法解题的运行效率较低。所以一般不提倡用递归算法设计程序。<br>(4) 在递归调用的过程当中系统为每一层的返回点、局部量等开辟了栈来存储。递归次数过多容易造成栈溢出等。所以一般不提倡用递归算法设计程序。</p><a id="more"></a>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(n)</span><br><span class="line">    <span class="keyword">if</span> int(n / <span class="number">2</span>) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> calc(int(n / <span class="number">2</span>))</span><br><span class="line">    print(<span class="string">"-&gt; "</span>,n)</span><br><span class="line">calc(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<h2 id="二、装饰器"><a href="#二、装饰器" class="headerlink" title="二、装饰器"></a>二、装饰器</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><strong>本质是函数，（装饰其他函数）就是为其他函数添加附加功能</strong></p>
<h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><ul>
<li>1.不能修改被装饰的函数源代码  </li>
<li>2.不能修改被装饰的函数调用方式</li>
</ul>
<h3 id="实现装饰器"><a href="#实现装饰器" class="headerlink" title="实现装饰器"></a>实现装饰器</h3><ul>
<li><strong>1.函数即“变量”</strong></li>
<li>2.高阶函数<br><em>a:把一个函数名当做实参传给另外一个函数（不修改被装饰函数源代码的情况下为其添加功能）<br>b:返回值中包含函数名(不修改函数的调用方式)</em><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+ <span class="number">3.</span>嵌套函数</span><br><span class="line"></span><br><span class="line"> **高阶函数+嵌套函数-&gt;装饰器**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">#示例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(func)</span>:</span> <span class="comment"># timer(test1) func =test1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        func(*args,**kwargs)   <span class="comment">#run test1</span></span><br><span class="line">        stop_time = time.time()</span><br><span class="line">        print(<span class="string">"the func run time is %s "</span> % (stop_time - start_time))</span><br><span class="line">    <span class="keyword">return</span>  wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@timer #test1 = timer(test1)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'in the test1'</span>)</span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(name,age)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'test2'</span>,name,age)</span><br><span class="line"></span><br><span class="line">test1()</span><br><span class="line">test2(<span class="string">'lin'</span>,<span class="number">22</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="三、迭代器与生成器"><a href="#三、迭代器与生成器" class="headerlink" title="三、迭代器与生成器"></a>三、迭代器与生成器</h2><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>通过列表生成式，我们可以直接创建一个列表。但是列表容量肯定是有限的。而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。<br>所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器</p>
<p>创建L和g的区别仅在于最外层的[]和()，L是一个list，而g是一个generator。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#普通循环</span></span><br><span class="line">[i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成器</span></span><br><span class="line">(i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000000000</span>))</span><br></pre></td></tr></table></figure>

<p>生成器只有在调用时才会生成相应的数据<br>只记录当前的位置<br>只有一个<strong>next</strong>()方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通过函数创建一个生成器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        <span class="keyword">yield</span>  b</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'done'</span></span><br><span class="line"></span><br><span class="line">f = fib(<span class="number">100</span>) <span class="comment">#生成器</span></span><br><span class="line"></span><br><span class="line">print(f.__next__())</span><br><span class="line">print(f.__next__())</span><br><span class="line">print(f.__next__())</span><br></pre></td></tr></table></figure>

<p>捕获异常处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'done'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = fib(<span class="number">6</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = next(g)</span><br><span class="line">        print(<span class="string">'g:'</span>, x)</span><br><span class="line">    <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'Generator return value:'</span>, e.value)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>通过yield实现在单线程的情况下实现并发运算的效果　</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">'Alex Li'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"%s 准备吃包子啦!"</span> %name)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">       baozi = <span class="keyword">yield</span></span><br><span class="line"></span><br><span class="line">       print(<span class="string">"包子[%s]来了,被[%s]吃了!"</span> %(baozi,name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(name)</span>:</span></span><br><span class="line">    c = consumer(<span class="string">'A'</span>)</span><br><span class="line">    c2 = consumer(<span class="string">'B'</span>)</span><br><span class="line">    c.__next__()</span><br><span class="line">    c2.__next__()</span><br><span class="line">    print(<span class="string">"老子开始准备做包子啦!"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">"做了2个包子!"</span>)</span><br><span class="line">        c.send(i)</span><br><span class="line">        c2.send(i)</span><br><span class="line"></span><br><span class="line">producer(<span class="string">"alex"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过生成器实现协程并行运算</span></span><br></pre></td></tr></table></figure>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p><em>可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator</em><br>可以使用isinstance()判断一个对象是否是Iterable对象：<br>可以直接作用于for循环的数据类型有以下几种：</p>
<ul>
<li>集合数据类型，如list、tuple、dict、set、str等；</li>
<li>是generator，包括生成器和带yield的generator function。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先获得Iterator对象:</span></span><br><span class="line">it = iter([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment"># 循环:</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获得下一个值:</span></span><br><span class="line">        x = next(it)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="comment"># 遇到StopIteration就退出循环</span></span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。</p>
<p>把list、dict、str等Iterable变成Iterator可以使用iter()函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(iter([]), Iterator)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(iter(<span class="string">'abc'</span>), Iterator)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h2 id="四、软件目录结构规范"><a href="#四、软件目录结构规范" class="headerlink" title="四、软件目录结构规范"></a>四、软件目录结构规范</h2><pre><code>Foo/
|-- bin/
|   |-- foo
|
|-- foo/
|   |-- tests/
|   |   |-- __init__.py
|   |   |-- test_main.py
|   |
|   |-- __init__.py
|   |-- main.py
|
|-- docs/
|   |-- conf.py
|   |-- abc.rst
|
|-- setup.py
|-- requirements.txt
|-- README</code></pre><p>解释一下:</p>
<ol>
<li>bin/: 存放项目的一些可执行文件，当然你可以起名script/之类的也行。</li>
<li>foo/: 存放项目的所有源代码。(1) 源代码中的所有模块、包都应该放在此目录。不要置于顶层目录。(2) 其子目录tests/存放单元测试代码； (3) 程序的入口最好命名为main.py。</li>
<li>docs/: 存放一些文档。</li>
<li>setup.py: 安装、部署、打包的脚本。</li>
<li>requirements.txt: 存放软件依赖的外部Python包列表。</li>
<li>README: 项目说明文件。<br>除此之外，有一些方案给出了更加多的内容。比如LICENSE.txt,ChangeLog.txt文件等，这里没有列，因为这些东西主要是项目开源的时候需要用到。如果想写一个开源软件，目录该如何组织，可以参考<a href="https://www.jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/" target="_blank" rel="noopener" title="这里">这里</a></li>
</ol>
<p>下面，再简单讲一下对这些目录的理解和个人要求吧。</p>
<p>关于README的内容<br>是每个项目都应该有的一个文件，目的是能简要描述该项目的信息，让读者快速了解这个项目。</p>
<p>它需要说明以下几个事项:</p>
<p>软件定位，软件的基本功能。<br>运行代码的方法: 安装环境、启动命令等。<br>简要的使用说明。<br>代码目录结构说明，更详细点可以说明软件的基本原理。<br>常见问题说明。<br>有以上几点是比较好的一个README。在软件开发初期，由于开发过程中以上内容可能不明确或者发生变化，并不是一定要在一开始就将所有信息都补全。但是在项目完结的时候，是需要撰写这样的一个文档的。</p>
<p>可以参考Redis源码中<a href="https://github.com/antirez/redis#what-is-redis" target="_blank" rel="noopener" title="Readme">Readme</a>的写法，这里面简洁但是清晰的描述了Redis功能和源码结构。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python学习-Day3</title>
    <url>/2019/11/Python%E5%AD%A6%E4%B9%A0-Day3%20/</url>
    <content><![CDATA[<blockquote>
<ol>
<li>函数基本语法及特性</li>
<li>参数与局部变量</li>
<li>返回值<br>嵌套函数</li>
<li>递归</li>
<li>匿名函数</li>
<li>函数式编程介绍</li>
<li>高阶函数</li>
<li>内置函数</li>
</ol>
</blockquote>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python学习-Day2</title>
    <url>/2019/11/Python%E5%AD%A6%E4%B9%A0-Day2/</url>
    <content><![CDATA[<blockquote>
<p>1.列表、元组操作<br>2.字符串操作<br>3.字典操作<br>4.集合操作<br>5.文件操作<br>6.字符编码与转码 </p>
</blockquote><h2 id="一、列表、元组操作"><a href="#一、列表、元组操作" class="headerlink" title="一、列表、元组操作"></a>一、列表、元组操作</h2><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表是最常用的数据类型之一，通过列表可以对数据实现最方便的存储、修改等操作</p><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names = [<span class="string">"Benjamin"</span>,<span class="string">"Tenglan"</span>,<span class="string">"Eric"</span>,<span class="string">"Rain"</span>,<span class="string">"Tom"</span>,<span class="string">"Amy"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names[<span class="number">1</span>:<span class="number">4</span>]  <span class="comment">#取下标1至下标4之间的数字，包括1，不包括4</span></span><br><span class="line">[<span class="string">'Tenglan'</span>, <span class="string">'Eric'</span>, <span class="string">'Rain'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names[<span class="number">1</span>:<span class="number">-1</span>] <span class="comment">#取下标1至-1的值，不包括-1</span></span><br><span class="line">[<span class="string">'Tenglan'</span>, <span class="string">'Eric'</span>, <span class="string">'Rain'</span>, <span class="string">'Tom'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names[<span class="number">0</span>:<span class="number">3</span>] </span><br><span class="line">[<span class="string">'Benjamin'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Eric'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names[:<span class="number">3</span>] <span class="comment">#如果是从头开始取，0可以忽略，跟上句效果一样</span></span><br><span class="line">[<span class="string">'Benjamin'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Eric'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names[<span class="number">3</span>:] <span class="comment">#如果想取最后一个，必须不能写-1，只能这么写</span></span><br><span class="line">[<span class="string">'Rain'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names[<span class="number">3</span>:<span class="number">-1</span>] <span class="comment">#这样-1就不会被包含了</span></span><br><span class="line">[<span class="string">'Rain'</span>, <span class="string">'Tom'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names[<span class="number">0</span>::<span class="number">2</span>] <span class="comment">#后面的2是代表，每隔一个元素，就取一个</span></span><br><span class="line">[<span class="string">'Benjamin'</span>, <span class="string">'Eric'</span>, <span class="string">'Tom'</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names[::<span class="number">2</span>] <span class="comment">#和上句效果一样</span></span><br><span class="line">[<span class="string">'Benjamin'</span>, <span class="string">'Eric'</span>, <span class="string">'Tom'</span>]</span><br></pre></td></tr></table></figure><a id="more"></a>


<h4 id="追加"><a href="#追加" class="headerlink" title="追加"></a>追加</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Benjamin'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Eric'</span>, <span class="string">'Rain'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names.append(<span class="string">"我是新来的"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Benjamin'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Eric'</span>, <span class="string">'Rain'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>, <span class="string">'我是新来的'</span>]</span><br></pre></td></tr></table></figure>
<h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Benjamin'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Eric'</span>, <span class="string">'Rain'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>, <span class="string">'我是新来的'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names.insert(<span class="number">2</span>,<span class="string">"强行从Eric前面插入"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Benjamin'</span>, <span class="string">'Tenglan'</span>, <span class="string">'强行从Eric前面插入'</span>, <span class="string">'Eric'</span>, <span class="string">'Rain'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>, <span class="string">'我是新来的'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names.insert(<span class="number">5</span>,<span class="string">"从eric后面插入试试新姿势"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Benjamin'</span>, <span class="string">'Tenglan'</span>, <span class="string">'强行从Eric前面插入'</span>, <span class="string">'Eric'</span>, <span class="string">'Rain'</span>, <span class="string">'从eric后面插入试试新姿势'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>, <span class="string">'我是新来的'</span>]</span><br></pre></td></tr></table></figure>

<h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Benjamin'</span>, <span class="string">'Tenglan'</span>, <span class="string">'强行从Eric前面插入'</span>, <span class="string">'Eric'</span>, <span class="string">'Rain'</span>, <span class="string">'从eric后面插入试试新姿势'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>, <span class="string">'我是新来的'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names[<span class="number">2</span>] = <span class="string">"该换人了"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Benjamin'</span>, <span class="string">'Tenglan'</span>, <span class="string">'该换人了'</span>, <span class="string">'Eric'</span>, <span class="string">'Rain'</span>, <span class="string">'从eric后面插入试试新姿势'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>, <span class="string">'我是新来的'</span>]</span><br></pre></td></tr></table></figure>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> names[<span class="number">2</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Benjamin'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Eric'</span>, <span class="string">'Rain'</span>, <span class="string">'从eric后面插入试试新姿势'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>, <span class="string">'我是新来的'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> names[<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Benjamin'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Eric'</span>, <span class="string">'Rain'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>, <span class="string">'我是新来的'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names.remove(<span class="string">"Eric"</span>) <span class="comment">#删除指定元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Benjamin'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Rain'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>, <span class="string">'我是新来的'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names.pop() <span class="comment">#删除列表最后一个值 </span></span><br><span class="line"><span class="string">'我是新来的'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Benjamin'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Rain'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>]</span><br></pre></td></tr></table></figure>
<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> names[<span class="number">2</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Benjamin'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Eric'</span>, <span class="string">'Rain'</span>, <span class="string">'从eric后面插入试试新姿势'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>, <span class="string">'我是新来的'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> names[<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Benjamin'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Eric'</span>, <span class="string">'Rain'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>, <span class="string">'我是新来的'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names.remove(<span class="string">"Eric"</span>) <span class="comment">#删除指定元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Benjamin'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Rain'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>, <span class="string">'我是新来的'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names.pop() <span class="comment">#删除列表最后一个值 </span></span><br><span class="line"><span class="string">'我是新来的'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Benjamin'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Rain'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>]</span><br></pre></td></tr></table></figure>
<h4 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Benjamin'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Rain'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name_copy = names.copy()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name_copy</span><br><span class="line">[<span class="string">'Benjamin'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Rain'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<h4 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Benjamin'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Amy'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names.count(<span class="string">"Amy"</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<h4 id="排序-amp-翻转"><a href="#排序-amp-翻转" class="headerlink" title="排序&amp;翻转"></a>排序&amp;翻转</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Benjamin'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Amy'</span>, <span class="string">'Tom'</span>, <span class="string">'Amy'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names.sort() <span class="comment">#排序</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: unorderable types: int() &lt; str()   <span class="comment">#3.0里不同数据类型不能放在一起排序了，擦</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names[<span class="number">-3</span>] = <span class="string">'1'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names[<span class="number">-2</span>] = <span class="string">'2'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names[<span class="number">-1</span>] = <span class="string">'3'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Benjamin'</span>, <span class="string">'Amy'</span>, <span class="string">'Amy'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Tom'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'Benjamin'</span>, <span class="string">'Amy'</span>, <span class="string">'Amy'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Tom'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names.reverse() <span class="comment">#反转</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Tom'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Amy'</span>, <span class="string">'Amy'</span>, <span class="string">'Benjamin'</span>, <span class="string">'3'</span>, <span class="string">'2'</span>, <span class="string">'1'</span>]</span><br></pre></td></tr></table></figure>
<h4 id="获取下标"><a href="#获取下标" class="headerlink" title="获取下标"></a>获取下标</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names</span><br><span class="line">[<span class="string">'Tom'</span>, <span class="string">'Tenglan'</span>, <span class="string">'Amy'</span>, <span class="string">'Amy'</span>, <span class="string">'Benjamin'</span>, <span class="string">'3'</span>, <span class="string">'2'</span>, <span class="string">'1'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>names.index(<span class="string">"Amy"</span>)</span><br><span class="line"><span class="number">2</span> <span class="comment">#只返回找到的第一个下标</span></span><br></pre></td></tr></table></figure>

<h3 id="元祖"><a href="#元祖" class="headerlink" title="元祖"></a>元祖</h3><p>元组跟列表差不多，不同于列表，不能再修改，所以又叫只读列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = (<span class="string">"nanjing"</span>,<span class="string">"suzhou"</span>,<span class="string">"wuxi"</span>)</span><br></pre></td></tr></table></figure>
<p>元祖只有两个方法(count,index)</p>
<h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><p>特性：不可修改　</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">"my name is &#123;name&#125; and i am &#123;year&#125; old"</span></span><br><span class="line"></span><br><span class="line">print(name.capitalize())</span><br><span class="line">print(name.count(<span class="string">"a"</span>))</span><br><span class="line">print(name.center(<span class="number">50</span>,<span class="string">"-"</span>))</span><br><span class="line">print(name.endswith(<span class="string">"ex"</span>))</span><br><span class="line"><span class="comment"># print(name.expandtabs(tabsize=30))</span></span><br><span class="line">print(name[name.find(<span class="string">"name"</span>):])</span><br><span class="line"></span><br><span class="line">print(name.format(name=<span class="string">'alex'</span>,year=<span class="number">30</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#字典</span></span><br><span class="line">print(name.format_map(&#123;<span class="string">'name'</span>:<span class="string">'alex'</span>,<span class="string">'year'</span>:<span class="number">12</span>&#125;))</span><br><span class="line">print(<span class="string">'ab123'</span>.isalnum())</span><br><span class="line">print(<span class="string">'abAB'</span>.isalpha())</span><br><span class="line">print(<span class="string">'12'</span>.isdecimal())</span><br><span class="line"></span><br><span class="line">print(<span class="string">'1A'</span>.isdigit())</span><br><span class="line"><span class="comment">#判断是否是一个合法的标识符</span></span><br><span class="line">print(<span class="string">'1A'</span>.isidentifier())</span><br><span class="line"></span><br><span class="line">print(<span class="string">'33.2'</span>.isnumeric()) <span class="comment">#只有数字在里面</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">'My name is '</span>.istitle())</span><br><span class="line">print(<span class="string">'my name'</span>.isprintable())</span><br><span class="line"></span><br><span class="line">print(<span class="string">'+'</span>.join([<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>]))</span><br><span class="line"></span><br><span class="line">print(name.ljust(<span class="number">50</span>,<span class="string">'*'</span>))</span><br><span class="line">print(name.rjust(<span class="number">50</span>,<span class="string">'-'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#去除换行</span></span><br><span class="line">print(<span class="string">'\nAlex'</span>.lstrip())</span><br><span class="line">print(<span class="string">'Alex\n'</span>.rstrip())</span><br><span class="line">print(<span class="string">'\nAlex\n'</span>.strip())</span><br><span class="line">print(<span class="string">'--------1--------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#字符替换,用于密码</span></span><br><span class="line">p = str.maketrans(<span class="string">"adbcef"</span>,<span class="string">"123456"</span>)</span><br><span class="line">print(<span class="string">"alex li"</span>.translate(p))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'alex'</span>.replace(<span class="string">'a'</span>,<span class="string">'M'</span>))</span><br><span class="line">print(<span class="string">'--------2--------'</span>)</span><br><span class="line">print(<span class="string">'alex li is me'</span>.rfind(<span class="string">'m'</span>))</span><br><span class="line">print(<span class="string">'1+2+3+4'</span>.split(<span class="string">'+'</span>))</span><br><span class="line">print(<span class="string">'1+2\n3+4'</span>.splitlines())</span><br><span class="line">print(<span class="string">'Alex'</span>.swapcase())</span><br><span class="line"></span><br><span class="line">print(<span class="string">'lex li'</span>.title())</span><br><span class="line"></span><br><span class="line">print(<span class="string">'lex li'</span>.zfill(<span class="number">50</span>))</span><br></pre></td></tr></table></figure>

<h2 id="字典操作"><a href="#字典操作" class="headerlink" title="字典操作"></a>字典操作</h2><p>字典一种key - value 的数据类型，使用就像我们上学用的字典，通过笔划、字母来查对应页的详细内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">info = &#123;</span><br><span class="line">    <span class="string">'stu1101'</span>: <span class="string">"TengLan Wu"</span>,</span><br><span class="line">    <span class="string">'stu1102'</span>: <span class="string">"LongZe Luola"</span>,</span><br><span class="line">    <span class="string">'stu1103'</span>: <span class="string">"XiaoZe Maliya"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>dict是无序的</li>
<li>key必须是唯一的,可以去重</li>
</ul>
<h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>info[<span class="string">"stu1104"</span>] = <span class="string">"苍井空"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info</span><br><span class="line">&#123;<span class="string">'stu1102'</span>: <span class="string">'LongZe Luola'</span>, <span class="string">'stu1104'</span>: <span class="string">'苍井空'</span>, <span class="string">'stu1103'</span>: <span class="string">'XiaoZe Maliya'</span>, <span class="string">'stu1101'</span>: <span class="string">'TengLan Wu'</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="修改-1"><a href="#修改-1" class="headerlink" title="修改"></a>修改</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>info[<span class="string">'stu1101'</span>] = <span class="string">"武藤兰"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info</span><br><span class="line">&#123;<span class="string">'stu1102'</span>: <span class="string">'LongZe Luola'</span>, <span class="string">'stu1103'</span>: <span class="string">'XiaoZe Maliya'</span>, <span class="string">'stu1101'</span>: <span class="string">'武藤兰'</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>info</span><br><span class="line">&#123;<span class="string">'stu1102'</span>: <span class="string">'LongZe Luola'</span>, <span class="string">'stu1103'</span>: <span class="string">'XiaoZe Maliya'</span>, <span class="string">'stu1101'</span>: <span class="string">'武藤兰'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info.pop(<span class="string">"stu1101"</span>) <span class="comment">#标准删除姿势</span></span><br><span class="line"><span class="string">'武藤兰'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info</span><br><span class="line">&#123;<span class="string">'stu1102'</span>: <span class="string">'LongZe Luola'</span>, <span class="string">'stu1103'</span>: <span class="string">'XiaoZe Maliya'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> info[<span class="string">'stu1103'</span>] <span class="comment">#换个姿势删除</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info</span><br><span class="line">&#123;<span class="string">'stu1102'</span>: <span class="string">'LongZe Luola'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info = &#123;<span class="string">'stu1102'</span>: <span class="string">'LongZe Luola'</span>, <span class="string">'stu1103'</span>: <span class="string">'XiaoZe Maliya'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info</span><br><span class="line">&#123;<span class="string">'stu1102'</span>: <span class="string">'LongZe Luola'</span>, <span class="string">'stu1103'</span>: <span class="string">'XiaoZe Maliya'</span>&#125; <span class="comment">#随机删除</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info.popitem()</span><br><span class="line">(<span class="string">'stu1102'</span>, <span class="string">'LongZe Luola'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info</span><br><span class="line">&#123;<span class="string">'stu1103'</span>: <span class="string">'XiaoZe Maliya'</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>info = &#123;<span class="string">'stu1102'</span>: <span class="string">'LongZe Luola'</span>, <span class="string">'stu1103'</span>: <span class="string">'XiaoZe Maliya'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"stu1102"</span> <span class="keyword">in</span> info <span class="comment">#标准用法</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info.get(<span class="string">"stu1102"</span>)  <span class="comment">#获取</span></span><br><span class="line"><span class="string">'LongZe Luola'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info[<span class="string">"stu1102"</span>] <span class="comment">#同上，但是看下面</span></span><br><span class="line"><span class="string">'LongZe Luola'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info[<span class="string">"stu1105"</span>]  <span class="comment">#如果一个key不存在，就报错，get不会，不存在只返回None</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">'stu1105</span></span><br></pre></td></tr></table></figure>
<h3 id="多级字典嵌套及操作"><a href="#多级字典嵌套及操作" class="headerlink" title="多级字典嵌套及操作"></a>多级字典嵌套及操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v_catalog = &#123;</span><br><span class="line">    <span class="string">"欧美"</span>:&#123;</span><br><span class="line">        <span class="string">"www.youporn.com"</span>: [<span class="string">"很多免费的,世界最大的"</span>,<span class="string">"质量一般"</span>],</span><br><span class="line">        <span class="string">"www.pornhub.com"</span>: [<span class="string">"很多免费的,也很大"</span>,<span class="string">"质量比yourporn高点"</span>],</span><br><span class="line">        <span class="string">"letmedothistoyou.com"</span>: [<span class="string">"多是自拍,高质量图片很多"</span>,<span class="string">"资源不多,更新慢"</span>],</span><br><span class="line">        <span class="string">"x-art.com"</span>:[<span class="string">"质量很高,真的很高"</span>,<span class="string">"全部收费,屌比请绕过"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"日韩"</span>:&#123;</span><br><span class="line">        <span class="string">"tokyo-hot"</span>:[<span class="string">"质量怎样不清楚,个人已经不喜欢日韩范了"</span>,<span class="string">"听说是收费的"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"大陆"</span>:&#123;</span><br><span class="line">        <span class="string">"1024"</span>:[<span class="string">"全部免费,真好,好人一生平安"</span>,<span class="string">"服务器在国外,慢"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">av_catalog[<span class="string">"大陆"</span>][<span class="string">"1024"</span>][<span class="number">1</span>] += <span class="string">",可以用爬虫爬下来"</span></span><br><span class="line">print(av_catalog[<span class="string">"大陆"</span>][<span class="string">"1024"</span>])</span><br><span class="line"><span class="comment">#ouput </span></span><br><span class="line">[<span class="string">'全部免费,真好,好人一生平安'</span>, <span class="string">'服务器在国外,慢,可以用爬虫爬下来'</span>]</span><br></pre></td></tr></table></figure>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#values</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info.values()</span><br><span class="line">dict_values([<span class="string">'LongZe Luola'</span>, <span class="string">'XiaoZe Maliya'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#keys</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info.keys()</span><br><span class="line">dict_keys([<span class="string">'stu1102'</span>, <span class="string">'stu1103'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#setdefault</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info.setdefault(<span class="string">"stu1106"</span>,<span class="string">"Alex"</span>)</span><br><span class="line"><span class="string">'Alex'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info</span><br><span class="line">&#123;<span class="string">'stu1102'</span>: <span class="string">'LongZe Luola'</span>, <span class="string">'stu1103'</span>: <span class="string">'XiaoZe Maliya'</span>, <span class="string">'stu1106'</span>: <span class="string">'Alex'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info.setdefault(<span class="string">"stu1102"</span>,<span class="string">"龙泽萝拉"</span>)</span><br><span class="line"><span class="string">'LongZe Luola'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info</span><br><span class="line">&#123;<span class="string">'stu1102'</span>: <span class="string">'LongZe Luola'</span>, <span class="string">'stu1103'</span>: <span class="string">'XiaoZe Maliya'</span>, <span class="string">'stu1106'</span>: <span class="string">'Alex'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#update </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info</span><br><span class="line">&#123;<span class="string">'stu1102'</span>: <span class="string">'LongZe Luola'</span>, <span class="string">'stu1103'</span>: <span class="string">'XiaoZe Maliya'</span>, <span class="string">'stu1106'</span>: <span class="string">'Alex'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = &#123;<span class="number">1</span>:<span class="number">2</span>,<span class="number">3</span>:<span class="number">4</span>, <span class="string">"stu1102"</span>:<span class="string">"龙泽萝拉"</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info.update(b)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>info</span><br><span class="line">&#123;<span class="string">'stu1102'</span>: <span class="string">'龙泽萝拉'</span>, <span class="number">1</span>: <span class="number">2</span>, <span class="number">3</span>: <span class="number">4</span>, <span class="string">'stu1103'</span>: <span class="string">'XiaoZe Maliya'</span>, <span class="string">'stu1106'</span>: <span class="string">'Alex'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#items</span></span><br><span class="line">info.items()</span><br><span class="line">dict_items([(<span class="string">'stu1102'</span>, <span class="string">'龙泽萝拉'</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="string">'stu1103'</span>, <span class="string">'XiaoZe Maliya'</span>), (<span class="string">'stu1106'</span>, <span class="string">'Alex'</span>)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过一个列表生成默认dict,有个没办法解释的坑，少用吧这个</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict.fromkeys([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="string">'testd'</span>)</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">'testd'</span>, <span class="number">2</span>: <span class="string">'testd'</span>, <span class="number">3</span>: <span class="string">'testd'</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方法1</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> info:</span><br><span class="line">    print(key,info[key])</span><br><span class="line"></span><br><span class="line"><span class="comment">#方法2</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> info.items(): <span class="comment">#会先把dict转成list,数据里大时莫用</span></span><br><span class="line">    print(k,v)</span><br></pre></td></tr></table></figure>
<h2 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h2><p>集合是一个无序的，不重复的数据组合，它的主要作用如下：</p>
<ul>
<li>去重，把一个列表变成集合，就自动去重了</li>
<li>关系测试，测试两组数据之前的交集、差集、并集等关系<br>常用操作<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_1 = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">demp = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">list_1  = set(list_1)</span><br><span class="line"></span><br><span class="line">list_2 = set([<span class="number">2</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">66</span>,<span class="number">22</span>,<span class="number">8</span>,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(list_1,list_2)</span><br><span class="line"><span class="comment">#交集</span></span><br><span class="line">print(list_1.intersection(list_2))</span><br><span class="line"></span><br><span class="line"><span class="comment">#并集</span></span><br><span class="line">print(list_1.union(list_2))</span><br><span class="line"><span class="comment">#差集</span></span><br><span class="line">print(list_1.difference(list_2))</span><br><span class="line">print(list_2.difference(list_1))</span><br><span class="line"></span><br><span class="line"><span class="comment">#子集</span></span><br><span class="line">list_3 = set([<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>])</span><br><span class="line">print(list_1.issubset(list_2))</span><br><span class="line">print(list_1.issuperset(list_2))</span><br><span class="line">print(list_3.issubset(list_1))</span><br><span class="line"></span><br><span class="line"><span class="comment">#对称差集</span></span><br><span class="line">print(list_1.symmetric_difference(list_2))</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断是否有交集,没有则为True</span></span><br><span class="line">list_4 = set([<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>])</span><br><span class="line">print(list_4.isdisjoint(list_3))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_1 = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">list_1 = set(list_1)</span><br><span class="line">list_2 = set([<span class="number">2</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">66</span>,<span class="number">22</span>,<span class="number">8</span>,<span class="number">4</span>])</span><br><span class="line"><span class="comment">#交集</span></span><br><span class="line">print(list_1 &amp; list_2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#并集</span></span><br><span class="line">print(list_1 | list_2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#差集 去掉共同的</span></span><br><span class="line">print(list_1 - list_2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#对称差集</span></span><br><span class="line">print(list_1 ^ list_2)</span><br></pre></td></tr></table></figure>

<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>对文件操作流程</p>
<ul>
<li>1.打开文件，得到文件句柄并赋值给一个变量</li>
<li>2.通过句柄对文件进行操作</li>
<li>3.关闭文件 </li>
</ul>
<p>打开文件的模式有：</p>
<ul>
<li>r，只读模式（默认）。</li>
<li>w，只写模式。【不可读；不存在则创建；存在则删除内容；】</li>
<li>a，追加模式。【可读；   不存在则创建；存在则只追加内容；】</li>
</ul>
<p>“+” 表示可以同时读写某个文件</p>
<ul>
<li>r+，可读写文件。【可读；可写；可追加】</li>
<li>w+，写读</li>
<li>a+，同a</li>
</ul>
<p>“U”表示在读取时，可以将 \r \n \r\n自动转换成 \n （与 r 或 r+ 模式同使用）</p>
<ul>
<li>rU</li>
<li>r+U</li>
</ul>
<p>“b”表示处理二进制文件（如：FTP发送上传ISO镜像文件，linux可忽略，windows处理二进制文件时需标注）</p>
<ul>
<li>rb</li>
<li>wb</li>
<li>ab</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">f = open('lyrics','a',encoding='utf-8') #文件句柄</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#a  = append</span></span><br><span class="line"><span class="string">f.write("\nwhen I was young I listen to the radio\n")</span></span><br><span class="line"><span class="string">data = f.read()</span></span><br><span class="line"><span class="string">print('--read',data)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">f.close()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in range(5):</span></span><br><span class="line"><span class="comment">#     print(f.readline())</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">f = open('lyrics2','r',encoding='utf-8') #文件句柄</span></span><br><span class="line"><span class="string">for line in  f.readlines():</span></span><br><span class="line"><span class="string">    print(line.strip()) # strip去除空格和换行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#不建议使用,因为当文件非常大的时候,很容易造成内存的溢出</span></span><br><span class="line"><span class="string">for index,line in enumerate(f.readlines()):</span></span><br><span class="line"><span class="string">    # print(line.strip()) # strip去除空格和换行</span></span><br><span class="line"><span class="string">    if index == 9 :</span></span><br><span class="line"><span class="string">        print("------------------------------")</span></span><br><span class="line"><span class="string">        print(line.strip())</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">##逐行读文件,当文件的大小不可预测的时候</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">count  = 0</span></span><br><span class="line"><span class="string">for line in f:</span></span><br><span class="line"><span class="string">    if count == 9:</span></span><br><span class="line"><span class="string">        print("------------------------------")</span></span><br><span class="line"><span class="string">        count += 1</span></span><br><span class="line"><span class="string">    print(line)</span></span><br><span class="line"><span class="string">    count +=1</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'lyrics2'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="comment">#文件句柄</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">#打印当前位置</span></span><br><span class="line"><span class="string">print(f.tell())</span></span><br><span class="line"><span class="string">#逐行读取</span></span><br><span class="line"><span class="string">print(f.readline())</span></span><br><span class="line"><span class="string">print(f.readline())</span></span><br><span class="line"><span class="string">print(f.readline())</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#打印当前位置</span></span><br><span class="line"><span class="string">print(f.tell())</span></span><br><span class="line"><span class="string">#回到指定位置</span></span><br><span class="line"><span class="string">print(f.seek(0))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#再次读取</span></span><br><span class="line"><span class="string">print(f.readline())</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print(f.encoding)</span></span><br><span class="line"><span class="comment">#文件在操作系统中的编号</span></span><br><span class="line"><span class="comment">#print(f.fileno())</span></span><br><span class="line"><span class="comment">#print(f.readable())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(f.flush())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print(dir(f.buffer))</span></span><br></pre></td></tr></table></figure>

<p>为了避免打开文件后忘记关闭,可以通过管理上下文，即：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(linkServicceFile, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">with</span> open(pipeLineFileOut, <span class="string">"w"</span>) <span class="keyword">as</span> dump_f:</span><br></pre></td></tr></table></figure>


<h2 id="字符编码与转码"><a href="#字符编码与转码" class="headerlink" title="字符编码与转码"></a>字符编码与转码</h2><ul>
<li><p>1.在python2默认编码是ASCII, python3里默认是unicode</p>
</li>
<li><p>2.unicode 分为 utf-32(占4个字节),utf-16(占两个字节)，utf-8(占1-4个字节)， so utf-16就是现在最常用的unicode版本， 不过在文件里存的还是utf-8，因为utf8省空间</p>
</li>
<li><p>3.在py3中encode,在转码的同时还会把string 变成bytes类型，decode在解码的同时还会把bytes变回string</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(sys.getdefaultencoding())</span><br><span class="line"></span><br><span class="line">msg = <span class="string">"我爱北京天安门"</span></span><br><span class="line"><span class="comment">#msg_gb2312 = msg.decode("utf-8").encode("gb2312")</span></span><br><span class="line">msg_gb2312 = msg.encode(<span class="string">"gb2312"</span>) <span class="comment">#python3默认就是unicode,不用再decode,喜大普奔</span></span><br><span class="line">gb2312_to_unicode = msg_gb2312.decode(<span class="string">"gb2312"</span>)</span><br><span class="line">gb2312_to_utf8 = msg_gb2312.decode(<span class="string">"gb2312"</span>).encode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line">print(msg)</span><br><span class="line">print(msg_gb2312)</span><br><span class="line">print(gb2312_to_unicode)</span><br><span class="line">print(gb2312_to_utf8)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python学习-Day1</title>
    <url>/2019/11/Python%E5%AD%A6%E4%B9%A0-Day1/</url>
    <content><![CDATA[<blockquote>
<p>1.变量介绍<br>2.字符编码<br>3.用户输入<br>4.模块初识<br>5. .pyc是什么？<br>6.数据类型初识<br>7.数据运算<br>8.表达式if …else语句<br>9.表达式for 循环<br>10.break and continue   </p>
</blockquote><h2 id="一、变量介绍"><a href="#一、变量介绍" class="headerlink" title="一、变量介绍"></a>一、变量介绍</h2><h3 id="定义规则"><a href="#定义规则" class="headerlink" title="定义规则"></a>定义规则</h3><ul>
<li>变量名只能是 字母、数字或下划线的任意组合</li>
<li>变量名的第一个字符不能是数字</li>
<li>以下关键字不能声明为变量名</li>
</ul><a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">'and'</span>, <span class="string">'as'</span>, <span class="string">'assert'</span>, <span class="string">'break'</span>, <span class="string">'class'</span>, <span class="string">'continue'</span>, <span class="string">'def'</span>, <span class="string">'del'</span>, <span class="string">'elif'</span>, <span class="string">'else'</span>, <span class="string">'except'</span>, <span class="string">'exec'</span>, <span class="string">'finally'</span>, <span class="string">'for'</span>, <span class="string">'from'</span>, <span class="string">'global'</span>, <span class="string">'if'</span>, <span class="string">'import'</span>, <span class="string">'in'</span>, <span class="string">'is'</span>, <span class="string">'lambda'</span>, <span class="string">'not'</span>, <span class="string">'or'</span>, <span class="string">'pass'</span>, <span class="string">'print'</span>, <span class="string">'raise'</span>, <span class="string">'return'</span>, <span class="string">'try'</span>, <span class="string">'while'</span>, <span class="string">'with'</span>, <span class="string">'yield'</span>]</span><br></pre></td></tr></table></figure>
<h3 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ame = <span class="string">"Benjamin"</span></span><br><span class="line">name2 = name</span><br><span class="line">print(name,name2)</span><br><span class="line">name = <span class="string">"Jack"</span></span><br><span class="line">print(<span class="string">"What is the value of name2 now?"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="二、字符编码"><a href="#二、字符编码" class="headerlink" title="二、字符编码"></a>二、字符编码</h2><p>python解释器在加载中py文件会对.py文件内容进行编码（默认ascill）</p>
<p>ASCII（American Standard Code for Information Interchange，美国标准信息交换代码）是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言，其最多只能用 8 位来表示（一个字节），即：2**8 = 256-1，所以，ASCII码最多只能表示 255 个符号。<br><img src="http://ningyylin.top/image/python/ASCII.jpg" alt></p>
<h3 id="关于中文"><a href="#关于中文" class="headerlink" title="关于中文"></a>关于中文</h3><p>为了处理汉字，程序员设计了用于简体中文的GB2312和用于繁体中文的big5。</p>
<p>GB2312(1980年)一共收录了7445个字符，包括6763个汉字和682个其它符号。汉字区的内码范围高字节从B0-F7，低字节从A1-FE，占用的码位是72*94=6768。其中有5个空位是D7FA-D7FE。</p>
<p>GB2312 支持的汉字太少。1995年的汉字扩展规范GBK1.0收录了21886个符号，它分为汉字区和图形符号区。汉字区包括21003个字符。2000年的 GB18030是取代GBK1.0的正式国家标准。该标准收录了27484个汉字，同时还收录了藏文、蒙文、维吾尔文等主要的少数民族文字。现在的PC平台必须支持GB18030，对嵌入式产品暂不作要求。所以手机、MP3一般只支持GB2312。</p>
<p>从ASCII、GB2312、GBK 到GB18030，这些编码方法是向下兼容的，即同一个字符在这些方案中总是有相同的编码，后面的标准支持更多的字符。在这些编码中，英文和中文可以统一地处理。区分中文编码的方法是高字节的最高位不为0。按照程序员的称呼，GB2312、GBK到GB18030都属于双字节字符集 (DBCS)。</p>
<p>有的中文Windows的缺省内码还是GBK，可以通过GB18030升级包升级到GB18030。不过GB18030相对GBK增加的字符，普通人是很难用到的，通常我们还是用GBK指代中文Windows内码。</p>
<h2 id="三、用户输入"><a href="#三、用户输入" class="headerlink" title="三、用户输入"></a>三、用户输入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#name = raw_input("What is your name?") #only on python 2.x</span></span><br><span class="line">name = input(<span class="string">"What is your name?"</span>)</span><br><span class="line">print(<span class="string">"Hello "</span> + name )</span><br></pre></td></tr></table></figure>

<p>输入密码时，如果想要不可见，需要利用getpass 模块中的 getpass方法，即：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 将用户输入的内容赋值给 name 变量</span></span><br><span class="line">pwd = getpass.getpass(<span class="string">"请输入密码："</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 打印输入的内容</span></span><br><span class="line">print(pwd)</span><br></pre></td></tr></table></figure>

<h2 id="四、模块知识"><a href="#四、模块知识" class="headerlink" title="四、模块知识"></a>四、模块知识</h2><p>Python有非常丰富和强大的标准库和第三方库</p>
<ul>
<li><p>sys</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!/usr/bin/env python</span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line">print(sys.argv)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">$ python test.py helo world</span><br><span class="line">[<span class="string">'test.py'</span>, <span class="string">'helo'</span>, <span class="string">'world'</span>]  <span class="comment">#把执行脚本时传递的参数获取到了</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>os</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line">os.system(<span class="string">"df -h"</span>) <span class="comment">#调用系统命令</span></span><br></pre></td></tr></table></figure></li>
<li><p>python tab补全模块(自定义)</p>
</li>
</ul>
<p>这里不展开，可以Google or Baidu</p>
<h2 id="五、-pyc是什么？"><a href="#五、-pyc是什么？" class="headerlink" title="五、.pyc是什么？"></a>五、.pyc是什么？</h2><p>Python是一门先编译后解释的语言</p>
<p>当python程序运行时，编译的结果则是保存在位于内存中的PyCodeObject中，当Python程序运行结束时，Python解释器则将PyCodeObject写回到pyc文件中。</p>
<p>当python程序第二次运行时，首先程序会在硬盘中寻找pyc文件，如果找到，则直接载入，否则就重复上面的过程。</p>
<p>所以我们应该这样来定位PyCodeObject和pyc文件，pyc文件其实是PyCodeObject的一种持久化保存方式</p>
<h2 id="六、数据类型初识"><a href="#六、数据类型初识" class="headerlink" title="六、数据类型初识"></a>六、数据类型初识</h2><h3 id="1、数字"><a href="#1、数字" class="headerlink" title="1、数字"></a>1、数字</h3><p>int（整型）</p>
<p>　　在32位机器上，整数的位数为32位，取值范围为-2<strong>31～2</strong>31-1，即-2147483648～2147483647<br>　　在64位系统上，整数的位数为64位，取值范围为-2<strong>63～2</strong>63-1，即-9223372036854775808～9223372036854775807<br>long（长整型）<br>　　跟C语言不同，Python的长整数没有指定位宽，即：Python没有限制长整数数值的大小，但实际上由于机器内存有限，我们使用的长整数数值不可能无限大。<br>　　注意，自从Python2.2起，如果整数发生溢出，Python会自动将整数数据转换为长整数，所以如今在长整数数据后面不加字母L也不会导致严重后果了。<br>float（浮点型）<br>　　浮点数用来处理实数，即带有小数的数字。类似于C语言中的double类型，占8个字节（64位），其中52位表示底，11位表示指数，剩下的一位表示符号。<br>complex（复数）<br>　　复数由实数部分和虚数部分组成，一般形式为x＋yj，其中的x是复数的实数部分，y是复数的虚数部分，这里的x和y都是实数。<br>注：Python中存在小数字池：-5 ～ 257</p>
<h3 id="2、布尔值"><a href="#2、布尔值" class="headerlink" title="2、布尔值"></a>2、布尔值</h3><p>真或假<br>1 或 0</p>
<h3 id="3、字符串"><a href="#3、字符串" class="headerlink" title="3、字符串"></a>3、字符串</h3><p>python中的字符串在C语言中体现为是一个字符数组，每次创建字符串时候需要在内存中开辟一块连续的空，并且一旦需要修改字符串的话，就需要再次开辟空间，+号每出现一次就会在内从中重新开辟一块空间。<br>字符串格式化输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">"Benjamin"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"i am %s "</span> % name</span><br><span class="line">  </span><br><span class="line"><span class="comment">#输出: i am Benjamin</span></span><br></pre></td></tr></table></figure>
<p>字符串常用功能：</p>
<ul>
<li>移除空白</li>
<li>分割</li>
<li>长度</li>
<li>索引</li>
<li>切片</li>
</ul>
<h3 id="4、列表"><a href="#4、列表" class="headerlink" title="4、列表"></a>4、列表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">'Benjamin'</span>, <span class="string">'seven'</span>, <span class="string">'eric'</span>]</span><br><span class="line">或</span><br><span class="line">name_list ＝ list([<span class="string">'Benjamin'</span>, <span class="string">'seven'</span>, <span class="string">'eric'</span>])</span><br></pre></td></tr></table></figure>
<p>基本操作：</p>
<ul>
<li>索引</li>
<li>切片</li>
<li>追加</li>
<li>删除</li>
<li>长度</li>
<li>切片</li>
<li>循环</li>
<li>包含</li>
</ul>
<h3 id="5、元组-不可变列表"><a href="#5、元组-不可变列表" class="headerlink" title="5、元组(不可变列表)"></a>5、元组(不可变列表)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ages = (<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>)</span><br><span class="line">或</span><br><span class="line">ages = tuple((<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>))</span><br></pre></td></tr></table></figure>

<h3 id="6、字典（无序）"><a href="#6、字典（无序）" class="headerlink" title="6、字典（无序）"></a>6、字典（无序）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">person = &#123;<span class="string">"name"</span>: <span class="string">"Benjamin"</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">或</span><br><span class="line">person = dict(&#123;<span class="string">"name"</span>: <span class="string">"Benjamin"</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="六、数据运算"><a href="#六、数据运算" class="headerlink" title="六、数据运算"></a>六、数据运算</h2><p>算数运算：<br><img src="http://ningyylin.top/image/python/arithmetic_operation.png" alt></p>
<p>比较运算：<br><img src="http://ningyylin.top/image/python/comparison_operation.png" alt></p>
<p>赋值运算：<br><img src="http://ningyylin.top/image/python/assignment_operation.jpg" alt></p>
<p>逻辑运算：<br><img src="http://ningyylin.top/image/python/logical_operation.png" alt></p>
<p>位运算：<br><img src="http://ningyylin.top/image/python/bit_operation.png" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line">  </span><br><span class="line">a = <span class="number">60</span>            <span class="comment"># 60 = 0011 1100</span></span><br><span class="line">b = <span class="number">13</span>            <span class="comment"># 13 = 0000 1101</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">c = a &amp; b;        <span class="comment"># 12 = 0000 1100</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Line 1 - Value of c is "</span>, c</span><br><span class="line">  </span><br><span class="line">c = a | b;        <span class="comment"># 61 = 0011 1101</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Line 2 - Value of c is "</span>, c</span><br><span class="line">  </span><br><span class="line">c = a ^ b;        <span class="comment"># 49 = 0011 0001 #相同为0，不同为1</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Line 3 - Value of c is "</span>, c</span><br><span class="line">  </span><br><span class="line">c = ~a;           <span class="comment"># -61 = 1100 0011</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Line 4 - Value of c is "</span>, c</span><br><span class="line">  </span><br><span class="line">c = a &lt;&lt; <span class="number">2</span>;       <span class="comment"># 240 = 1111 0000</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Line 5 - Value of c is "</span>, c</span><br><span class="line">  </span><br><span class="line">c = a &gt;&gt; <span class="number">2</span>;       <span class="comment"># 15 = 0000 1111</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Line 6 - Value of c is "</span>, c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按位取反运算规则(按位取反再加1)</span></span><br></pre></td></tr></table></figure>

<p>运算符优先级：<br><img src="http://ningyylin.top/image/python/operator_precedence.png" alt></p>
<h2 id="七、表达式if-else"><a href="#七、表达式if-else" class="headerlink" title="七、表达式if  else"></a>七、表达式if  else</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 验证用户名和密码</span></span><br><span class="line"><span class="comment">#     如果错误，则输出用户名或密码错误</span></span><br><span class="line"><span class="comment">#     如果成功，则输出 欢迎，XXX!</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: encoding -*-</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">name = raw_input(<span class="string">'请输入用户名：'</span>)</span><br><span class="line">pwd = getpass.getpass(<span class="string">'请输入密码：'</span>)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> name == <span class="string">"alex"</span> <span class="keyword">and</span> pwd == <span class="string">"cmd"</span>:</span><br><span class="line">    print(<span class="string">"欢迎，alex！"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"用户名和密码错误"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="八、表达式for-循环"><a href="#八、表达式for-循环" class="headerlink" title="八、表达式for 循环"></a>八、表达式for 循环</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    print(<span class="string">"loop:"</span>, i )</span><br></pre></td></tr></table></figure>

<h2 id="九、while-loop"><a href="#九、while-loop" class="headerlink" title="九、while loop"></a>九、while loop</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line"> </span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">"dead loop..."</span>,count)</span><br><span class="line">    count +=<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>pip设置阿里云的镜像源</title>
    <url>/2019/11/pip%E8%AE%BE%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84%E9%95%9C%E5%83%8F%E6%BA%90/</url>
    <content><![CDATA[<h2 id="1-Linux配置路径"><a href="#1-Linux配置路径" class="headerlink" title="1.Linux配置路径"></a>1.Linux配置路径</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi ~/.pip/pip.conf</span><br></pre></td></tr></table></figure><h2 id="2-Windows配置路径"><a href="#2-Windows配置路径" class="headerlink" title="2.Windows配置路径"></a>2.Windows配置路径</h2><p>如果没有pip文件夹,那么新建pip</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash">HOMEPATH%\pip\pip.ini</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[global]  </span><br><span class="line">index-url=http://mirrors.aliyun.com/pypi/simple/  </span><br><span class="line">[install]  </span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pip</tag>
      </tags>
  </entry>
  <entry>
    <title>Git多账号配置</title>
    <url>/2019/11/Git%E5%A4%9A%E8%B4%A6%E5%8F%B7%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="1-生成新的-SSH-keys"><a href="#1-生成新的-SSH-keys" class="headerlink" title="1.生成新的 SSH keys"></a>1.生成新的 SSH keys</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa.github -C "xxxx@163.com"</span><br><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa.gitee -C "xxxx@163.com"</span><br><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa.gitlab -C "xxxx@163.net"</span><br></pre></td></tr></table></figure><a id="more"></a>
<h2 id="2-多账号必须配置-config-文件-重点"><a href="#2-多账号必须配置-config-文件-重点" class="headerlink" title="2.多账号必须配置 config 文件(重点)"></a>2.多账号必须配置 config 文件(重点)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> touch ~/.ssh/config</span></span><br></pre></td></tr></table></figure>
<h2 id="3-config-里需要填的内容"><a href="#3-config-里需要填的内容" class="headerlink" title="3.config 里需要填的内容"></a>3.config 里需要填的内容</h2><pre><code class="shell"><span class="meta">#</span><span class="bash">Default gitHub user Self</span>
Host github.com
HostName github.com
User git
IdentityFile ~/.ssh/id_rsa.github

<span class="meta">#</span><span class="bash"> gitee</span>
    Host gitee.com
    HostName gitee.com
    User git
    IdentityFile ~/.ssh/id_rsa.gitee


<span class="meta">#</span><span class="bash">Add gitLab user </span>
    Host git@DiEP-Infra
    HostName DiEP-Infra
    IdentityFile ~/.ssh/id_rsa.gitlab</code></pre>
<h2 id="4-在-github-和-gitlab-网站添加-ssh"><a href="#4-在-github-和-gitlab-网站添加-ssh" class="headerlink" title="4.在 github 和 gitlab 网站添加 ssh"></a>4.在 github 和 gitlab 网站添加 ssh</h2><p>拷贝的~/.ssh/id_rsa.xxx.pub文件内容粘帖到 key 一栏，在点击 “add key” 按钮就可以了。</p>
<p><a href="https://gitee.com/profile/sshkeys" target="_blank" rel="noopener">https://gitee.com/profile/sshkeys</a><br><a href="https://github.com/settings/keys" target="_blank" rel="noopener">https://github.com/settings/keys</a></p>
<h2 id="5-测试是否连接成功"><a href="#5-测试是否连接成功" class="headerlink" title="5.测试是否连接成功"></a>5.测试是否连接成功</h2><pre><code class="shell">ssh -T git@github.com
ssh -T  git@gitLab-host
ssh -T git@gitee.com</code></pre>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
        <tag>Gitee</tag>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Vultr CentOS7主机禁用80端口问题</title>
    <url>/2019/11/%E8%A7%A3%E5%86%B3Vultr%20CentOS7%E4%B8%BB%E6%9C%BA%E7%A6%81%E7%94%A880%E7%AB%AF%E5%8F%A3%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在VULTR centOS7上安装了Nginx，无法访问Nginx初始化页面。</p><p>查询资料后发现应该是防火墙禁了80端口，解禁后页面访问正常,以下为操作步骤</p><h2 id="1-查看防火墙版本号"><a href="#1-查看防火墙版本号" class="headerlink" title="1.查看防火墙版本号"></a>1.查看防火墙版本号</h2><p>firewall-cmd –version<br>centos 7.3是自带firewall防火墙，提示版本号。</p><h2 id="2-查看防火墙状态"><a href="#2-查看防火墙状态" class="headerlink" title="2.查看防火墙状态"></a>2.查看防火墙状态</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure><a id="more"></a>



<h2 id="3-添加80端口的权限"><a href="#3-添加80端口的权限" class="headerlink" title="3.添加80端口的权限"></a>3.添加80端口的权限</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure>

<p>命令含义：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--zone #作用域</span><br><span class="line">--add-port=80/tcp #添加端口，格式为：端口/通讯协议</span><br><span class="line">--permanent #永久生效，没有此参数重启后失效</span><br></pre></td></tr></table></figure>
<h2 id="4-重启防火墙"><a href="#4-重启防火墙" class="headerlink" title="4.重启防火墙"></a>4.重启防火墙</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure>

<p>扩展：</p>
<p>firewalld的命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">运行、停止、禁用firewalld</span><br><span class="line">启动：# systemctl start firewalld</span><br><span class="line">重启：# systemctl restart firewalld</span><br><span class="line">查看状态：# systemctl status firewalld 或者 firewall-cmd --state</span><br><span class="line">停止：# systemctl disable firewalld</span><br><span class="line">禁用：# systemctl stop firewalld</span><br><span class="line">配置firewalld</span><br><span class="line">查看版本：$ firewall-cmd --version</span><br><span class="line">查看帮助：$ firewall-cmd --help</span><br><span class="line">显示状态：$ firewall-cmd --state</span><br><span class="line">查看区域信息: $ firewall-cmd --get-active-zones</span><br><span class="line">查看指定接口所属区域：$ firewall-cmd --get-zone-of-interface=eth0</span><br><span class="line">拒绝所有包：# firewall-cmd --panic-on</span><br><span class="line">取消拒绝状态：# firewall-cmd --panic-off</span><br><span class="line">查看是否拒绝：$ firewall-cmd --query-panic</span><br><span class="line">更新防火墙规则：</span><br><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --reload</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --complete-reload</span></span><br><span class="line">两者的区别就是第一个无需断开连接，就是firewalld特性之一动态添加规则，第二个需要断开连接，类似重启服务</span><br><span class="line">将接口添加到区域，默认接口都在public</span><br><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --zone=public --add-interface=eth0</span></span><br><span class="line">永久生效再加上 --permanent 然后reload防火墙</span><br><span class="line">设置默认接口区域</span><br><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --<span class="built_in">set</span>-default-zone=public</span></span><br><span class="line">立即生效无需重启</span><br><span class="line">打开端口（貌似这个才最常用）</span><br><span class="line">查看所有打开的端口：</span><br><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --zone=dmz --list-ports</span></span><br><span class="line">加入一个端口到区域：</span><br><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --zone=dmz --add-port=8080/tcp</span></span><br><span class="line">若要永久生效方法同上</span><br><span class="line">打开一个服务，类似于将端口可视化，服务需要在配置文件中添加，/etc/firewalld 目录下有services文件夹，这个不详细说了，详情参考文档</span><br><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --zone=work --add-service=smtp</span></span><br><span class="line">移除服务</span><br><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --zone=work --remove-service=smtp</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Vultr</tag>
      </tags>
  </entry>
  <entry>
    <title>Supervisor使用</title>
    <url>/2019/11/Supervisor%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Surpervisor介绍"><a href="#Surpervisor介绍" class="headerlink" title="Surpervisor介绍"></a>Surpervisor介绍</h2><ul>
<li><p>官方链接 <a href="http://supervisord.org/" target="_blank" rel="noopener" title="Supervisor: A Process Control System">Supervisor</a>.</p>
</li>
<li><p>官方介绍 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Supervisor is a client/server system that allows its users to monitor and control a number of processes on UNIX-like operating systems.</span><br></pre></td></tr></table></figure>
<h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2></li>
<li><p>Python版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.7.5</span><br></pre></td></tr></table></figure></li>
<li><p>操作系统</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Distributor ID:	CentOS</span><br><span class="line">Description:	CentOS Linux release 7.6.1810 (Core) </span><br><span class="line">Release:	7.6.1810</span><br><span class="line">Codename:	Core</span><br></pre></td></tr></table></figure>
<h2 id="Surpervisor安装"><a href="#Surpervisor安装" class="headerlink" title="Surpervisor安装"></a>Surpervisor安装</h2><h3 id="Pip在线安装"><a href="#Pip在线安装" class="headerlink" title="Pip在线安装"></a>Pip在线安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install supervisor</span><br></pre></td></tr></table></figure>

<h3 id="发布包安装-centos为例"><a href="#发布包安装-centos为例" class="headerlink" title="发布包安装(centos为例)"></a>发布包安装(centos为例)</h3></li>
<li><p>yum install 的方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y supervisor</span><br></pre></td></tr></table></figure>
</li>
<li><p>easy_install的方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y python-setuptools</span><br><span class="line">easy_install supervisor</span><br><span class="line">echo_supervisord_conf &gt; /etc/supervisord.conf</span><br></pre></td></tr></table></figure>

</li>
</ul><a id="more"></a>
<h2 id="Surpervisor配置"><a href="#Surpervisor配置" class="headerlink" title="Surpervisor配置"></a>Surpervisor配置</h2><h3 id="默认supervisord配置"><a href="#默认supervisord配置" class="headerlink" title="默认supervisord配置"></a>默认supervisord配置</h3><p>1.查看默认配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo_supervisord_conf</span><br></pre></td></tr></table></figure>
<p>2.yum install方式安装 以下文件和目录会自动生成,如果没有,请自行创建</p>
<blockquote>
<p>/etc/supervisord.conf<br>/etc/supervisord.d</p>
</blockquote>
<p>3.在 /etc/supervisord.d下创建conf和log两个目录,用于存储管理进程配置文件和日志文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/supervisord.d</span><br><span class="line">mkdir conf log</span><br></pre></td></tr></table></figure>
<p>4.修改/etc/supervisord.conf的[include]</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/supervisord.conf</span><br></pre></td></tr></table></figure>

<p>5.将/etc/supervisord.d/conf目录所用应用配置包含进来</p>
<blockquote>
<p>[include]<br>files = supervisord.d/conf/*.conf</p>
</blockquote>
<h3 id="应用配置"><a href="#应用配置" class="headerlink" title="应用配置"></a>应用配置</h3><p><code>需要说明的是 在启动Nginx命令需要增加daemon off参数</code></p>
<p>创建nginx.conf配置文件,内容如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[program:nginx]</span><br><span class="line">directory = /usr/local/nginx/sbin ; 程序的启动目录</span><br><span class="line">command = /usr/local/nginx/sbin/nginx -g 'daemon off;' </span><br><span class="line">autostart = true     ; 在 supervisord 启动的时候也自动启动</span><br><span class="line">startsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了</span><br><span class="line">autorestart = true   ; 程序异常退出后自动重启</span><br><span class="line">startretries = 3     ; 启动失败自动重试次数，默认是 3</span><br><span class="line">user = root          ; 用哪个用户启动</span><br><span class="line">redirect_stderr = true  ; 把 stderr 重定向到 stdout，默认 false</span><br><span class="line">stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB</span><br><span class="line">stdout_logfile_backups = 20     ; stdout 日志文件备份数</span><br><span class="line">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class="line">stdout_logfile = /etc/supervisord.d/log/nginx.log  ;日志统一放在log目录下</span><br><span class="line">; 可以通过 environment 来添加需要的环境变量，一种常见的用法是修改 PYTHONPATH</span><br><span class="line">; environment=PYTHONPATH=$PYTHONPATH:/path/to/somewhere</span><br></pre></td></tr></table></figure>

<h2 id="Surpervisor启动"><a href="#Surpervisor启动" class="headerlink" title="Surpervisor启动"></a>Surpervisor启动</h2><ul>
<li><p>方式一</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> supervisord二进制启动</span></span><br><span class="line">supervisord -c /etc/supervisord.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查进程</span></span><br><span class="line">ps aux | grep supervisord</span><br></pre></td></tr></table></figure>
</li>
<li><p>方式二</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /etc/rc.d/init.d/supervisord</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Supervisor is a client/server system that</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> allows its users to monitor and control a</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> number of processes on UNIX-like operating</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systems.</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chkconfig: - 64 36</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> description: Supervisor Server</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> processname: supervisord</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Source init <span class="built_in">functions</span></span></span><br><span class="line">. /etc/rc.d/init.d/functions</span><br><span class="line"></span><br><span class="line">prog="supervisord"</span><br><span class="line"></span><br><span class="line">prefix="/usr"</span><br><span class="line">exec_prefix="$&#123;prefix&#125;"</span><br><span class="line">prog_bin="$&#123;exec_prefix&#125;/bin/supervisord"</span><br><span class="line">PIDFILE="/var/run/$prog.pid"</span><br><span class="line"></span><br><span class="line">start()</span><br><span class="line">&#123;</span><br><span class="line">       echo -n $"Starting $prog: "</span><br><span class="line">       daemon $prog_bin --pidfile $PIDFILE -c /etc/supervisord.conf</span><br><span class="line">       [ -f $PIDFILE ] &amp;&amp; success $"$prog startup" || failure $"$prog startup"</span><br><span class="line">       echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop()</span><br><span class="line">&#123;</span><br><span class="line">       echo -n $"Shutting down $prog: "</span><br><span class="line">       [ -f $PIDFILE ] &amp;&amp; killproc $prog || success $"$prog shutdown"</span><br><span class="line">       echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case "$1" in</span><br><span class="line"></span><br><span class="line"> start)</span><br><span class="line">   start</span><br><span class="line"> ;;</span><br><span class="line"></span><br><span class="line"> stop)</span><br><span class="line">   stop</span><br><span class="line"> ;;</span><br><span class="line"></span><br><span class="line"> status)</span><br><span class="line">       status $prog</span><br><span class="line"> ;;</span><br><span class="line"></span><br><span class="line"> restart)</span><br><span class="line">   stop</span><br><span class="line">   start</span><br><span class="line"> ;;</span><br><span class="line"></span><br><span class="line"> *)</span><br><span class="line">   echo "Usage: $0 &#123;start|stop|restart|status&#125;"</span><br><span class="line"> ;;</span><br><span class="line"></span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="supervisorctl-amp-supervisord"><a href="#supervisorctl-amp-supervisord" class="headerlink" title="supervisorctl&amp;supervisord"></a>supervisorctl&amp;supervisord</h2><h3 id="supervisorctl"><a href="#supervisorctl" class="headerlink" title="supervisorctl"></a>supervisorctl</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">supervisorctl stop programxxx，停止某一个进程(programxxx)，programxxx 为[program:beepkg] 里配置的值，这个示例就是 beepkg。  </span><br><span class="line">supervisorctl start programxxx，启动某个进程。  </span><br><span class="line">supervisorctl restart programxxx，重启某个进程。  </span><br><span class="line">supervisorctl status，查看进程状态。  </span><br><span class="line">supervisorctl stop groupworker ，重启所有属于名为 groupworker 这个分组的进程(start,restart 同理)。  </span><br><span class="line">supervisorctl stop all，停止全部进程，注：start、restart、stop 都不会载入最新的配置文件。  </span><br><span class="line">supervisorctl reload，载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程。  </span><br><span class="line">supervisorctl update，根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启。</span><br></pre></td></tr></table></figure>
<h3 id="supervisord"><a href="#supervisord" class="headerlink" title="supervisord"></a>supervisord</h3><p>supervisord，初始启动 Supervisord，启动、管理配置中设置的进程</p>
<h2 id="Supervisor控制台"><a href="#Supervisor控制台" class="headerlink" title="Supervisor控制台"></a>Supervisor控制台</h2><p>在/etc/supervisord.conf中修改[inet_http_server]的参数，具体如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[inet_http_server]         ; inet (TCP) server disabled by default</span><br><span class="line">port=*:9001        ; ip_address:port specifier, *:port for all iface</span><br><span class="line">username=root             ; default is no username (open server)</span><br><span class="line">password=xxxx               ; default is no password (open server)</span><br></pre></td></tr></table></figure>

<p>修改后重启supervisor进程，在浏览器访问 http://<host-ip>:9001</host-ip></p>
<p>参考：<br><a href="http://supervisord.org/" target="_blank" rel="noopener">http://supervisord.org/</a><br><a href="https://blog.csdn.net/huwh_/article/details/80497790" target="_blank" rel="noopener">https://blog.csdn.net/huwh_/article/details/80497790</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Supervisor</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统安装Nodejs</title>
    <url>/2019/10/Linux%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85Nodejs/</url>
    <content><![CDATA[<h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p>1.下载地址 : <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p>
<p><img src="http://ningyylin.top/image/nodejs/nodejs_1_1.png" alt=""></p>
<p>2.选择合适环境的linux版本下载</p>
<a id="more"></a>

<p><img src="http://ningyylin.top/image/nodejs/nodejs_1_2.png" alt=""></p>
<h2 id="安装NODEJS"><a href="#安装NODEJS" class="headerlink" title="安装NODEJS"></a>安装NODEJS</h2><p>1.将安装包上传到指定位置(/usr/local/src/)目录，并解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvf node-v12.13.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>
<p>2.重命名文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv node-v12.13.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>
<p>3.通过建立软连接变为全局</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /usr/local/src/nodejs/bin/npm /usr/local/bin/</span><br><span class="line">ln -s /usr/local/src/nodejs/bin/node /usr/local/bin/</span><br></pre></td></tr></table></figure>
<p>4.检查是否安装成功，命令：node -v,npm -v</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line"></span><br><span class="line">v12.13.0</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm -v</span><br><span class="line"></span><br><span class="line">6.12.0</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Github快速上传项目</title>
    <url>/2018/1/Github%E5%BF%AB%E9%80%9F%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>1、在github上创建项目</p><p>2、使用git clone -b xxx  <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:grainrain/xxx.git c:\xxx 克隆到本地</p><p>3、编辑项目</p><p>4、git add . （将改动添加到暂存区）</p><p>5、git commit -m “提交说明”</p><p>6、git push origin master 将本地更改推送到远程master分支。</p>]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
</search>
